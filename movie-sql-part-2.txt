-- Get the average rating for a movie SELECT movies.title, AVG(ratings.rating)FROM movies   JOIN ratings ON movies.movieid = ratings.movieid GROUP BY movies.title;  -- Get the total ratings for a movie SELECT movies.title, sum(ratings.rating)FROM movies   JOIN ratings ON movies.movieid = ratings.movieid GROUP BY movies.title;  -- Get the total movies for a genre SELECT genre.genres, count(movies.title) FROM genre   JOIN movie_genre ON movie_genre.genre_id = genre.id   JOIN movies ON movies.movieid = movie_genre.movieid GROUP BY genre.genres;  -- Get the average rating for a user SELECT userid, AVG(rating) FROM ratings GROUP BY userid;  -- Find the user with the most ratings SELECT userid, count(rating) FROM ratings GROUP BY userid ORDER BY count(rating) DESC LIMIT 1;  -- Find the user with the highest average rating SELECT userid, AVG(rating) FROM ratings GROUP BY userid ORDER BY AVG(rating) DESC LIMIT 1;  -- Find the user with the highest average rating with more than 50 reviews SELECT userid, AVG(rating), count(rating) FROM ratings GROUP BY userid HAVING count(rating) > 50 ORDER BY AVG(rating) DESC LIMIT 1;  -- Find the movies with an average rating over 4 SELECT movies.title, avg(ratings.rating) FROM movies   JOIN ratings on movies.movieid = ratings.movieid GROUP BY movies.title   HAVING avg(ratings.rating) >4 ORDER BY avg(ratings.rating) DESC;  -- For each genre find the total number of reviews as well as the average review --  sort by highest average review. SELECT genre.genres, count(ratings.rating), avg(ratings.rating) FROM genre   JOIN movie_genre ON genre.id = movie_genre.genre_id   JOIN movies ON movie_genre.movieid = movies.movieid   JOIN ratings ON movies.movieid = ratings.movieid GROUP BY genre.genres ORDER BY avg(ratings.rating) DESC;  -- Create a new table called actors (We are going to pretend the actor can only play in one movie) The table should include name, character name, foreign key to movies and date of birth at least plus an id field. CREATE TABLE actors (   id SERIAL PRIMARY KEY,   name varchar(100) NOT NULL,   movieid INT REFERENCES movies(movieid),   DOB INT );  -- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements -- Tuesdays with morrie id 7753 INSERT INTO actors(name, movieid, DOB)   VALUES ('Jack Lemmon', 7753, 02081925), ('Hank Azaria', 7753,04251964), ('Wendy Moniz', 7753,01191969),     ('Caroline Aaron', 7753, 08071952), ('Bonnie Bartlett', 7753, 06201929), ('John Carroll Lynch', 7753, 08011963),     ('Carlton Wilborn', 7753, 05291964), ('Kyle Sullivan', 7753, 09241988);  -- Dead Poet's Society id 1246 INSERT INTO  actors(name, movieid, DOB)     VALUES ('Robin Williams', 1246, 07211951), ('Robert Sean Leonard', 1246, 02281969), ('Ethan Hawke', 1246, 11061970),       ('Josh Charles', 1246, 09151971), ('Dylan Kussman', 1246, 02211971), ('Allelon Ruggiero', 1246, 03051971),       ('James Waterson', 1246, 01171969), ('Kurtwood Smith', 1246, 07031943);  -- Good Will Hunting id 1704 INSERT INTO actors(name, movieid, DOB)     VALUES ('Robin Williams', 1704, 07211951), ('Matt Damon', 1704, 10081970), ('Ben Affleck', 1704, 08151972),       ('Stellan Skarsgård', 1704, 06131951), ('Minnie Driver', 1704, 01311970), ('Casey Affleck', 1704, 08121975),       ('Cole Hauser', 1704, 03221975), ('John Mighton', 1704, 10021957);  SELECT * FROM actors;  -- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating ALTER TABLE movies ADD MPAA VARCHAR(255);  UPDATE movies SET mpaa = 'G' WHERE title = 'Toy Story (1995)';  UPDATE movies SET mpaa = 'PG' WHERE title = 'Jumanji (1995)';  UPDATE movies SET mpaa = 'PG-13' WHERE title = 'Grumpier Old Men (1995)';  UPDATE movies SET mpaa = 'R' WHERE title = 'Waiting to Exhale (1995)';  UPDATE movies SET mpaa = 'PG' WHERE title = 'Father of the Bride Part II (1995)';  SELECT * FROM movies WHERE mpaa NOTNULL; 
